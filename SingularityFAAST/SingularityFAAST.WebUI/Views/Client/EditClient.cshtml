
@model SingularityFAAST.Core.ViewModels.EditClientViewModel



@{
    ViewBag.Title = "Edit Client";
}

<h2>View/Update Client</h2>

@using (Html.BeginForm())
{



    <div class="row">

        @Html.HiddenFor(x => x.Client.ClientID)


        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.Title)
                @Html.TextBoxFor(viewModel => viewModel.Client.Title, new { @class = "form-control", maxlength = "20" })
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.ClientID, "Client Number")
                @Html.TextBoxFor(viewModel => viewModel.Client.ClientID, new { @class = "form-control", disabled="disabled" })

                @*<a data-toggle="tooltip" data-placement="bottom" title="This has been entered for you">
                    <Input disabled="disabled" type="text" class="form-control" value="@Model.NextInventoryNumber" name="InventoryNumber">
                </a>*@
            </div>
        </div>


    </div>


    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.FirstName, "First Name *")
                @Html.TextBoxFor(viewModel => viewModel.Client.FirstName, new { @class = "form-control", required = "required", maxlength = "50" })
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.MiddleInitial, "Middle Initial")
                @Html.TextBoxFor(viewModel => viewModel.Client.MiddleInitial, new { @class = "form-control", maxlength = "1" })
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.LastName, "Last Name *")
                @Html.TextBoxFor(viewModel => viewModel.Client.LastName, new { @class = "form-control", required = "required", maxlength = "50" })
            </div>
        </div>
    </div>


    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.Address1, "Street Address *")
                @Html.TextBoxFor(viewModel => viewModel.Client.Address1, new { @class = "form-control", required = "required", maxlength = "200" })
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.Address2, "Unit/Apartment Number")
                @Html.TextBoxFor(viewModel => viewModel.Client.Address2, new { @class = "form-control", maxlength = "200" })
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.City, "City *")
                @Html.TextBoxFor(viewModel => viewModel.Client.City, new { @class = "form-control", required = "required", maxlength = "50" })
            </div>
        </div>
    </div>



    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.StateName, "State Name")
                @Html.TextBoxFor(viewModel => viewModel.Client.StateName, new { @class = "form-control", maxlength = "30" })
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.StateCode, "State Code")
                @Html.TextBoxFor(viewModel => viewModel.Client.StateCode, new { @class = "form-control", maxlength = "2" })
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.County)
                @Html.TextBoxFor(viewModel => viewModel.Client.County, new { @class = "form-control", maxlength = "50" })
            </div>
        </div>
    </div>



    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.CountyFIPS, "CountyFIPS *")
                @Html.TextBoxFor(viewModel => viewModel.Client.CountyFIPS, new { @class = "form-control", required = "required", maxlength = "10" })
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.Zip, "Zip *")
                @Html.TextBoxFor(viewModel => viewModel.Client.Zip, new { @class = "form-control", required = "required", maxlength = "10" })
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.Email)
                @Html.TextBoxFor(viewModel => viewModel.Client.Email, new { @class = "form-control", maxlength = "100", type = "email" })
            </div>
        </div>
    </div>


    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.CellPhone, "Primary Phone")
                @Html.TextBoxFor(viewModel => viewModel.Client.CellPhone, new { @class = "form-control", required = "required", maxlength = "20" })
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.HomePhone, "Secondary Phone")
                @Html.TextBoxFor(viewModel => viewModel.Client.HomePhone, new { @class = "form-control", maxlength = "20" })
            </div>
        </div>


        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.WorkPhone, "Work Phone")
                @Html.TextBoxFor(viewModel => viewModel.Client.WorkPhone, new { @class = "form-control", maxlength = "30" })
            </div>
        </div>
    </div>



    <div class="row">

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.ClientCategoryName, "Client Category")


                @Html.DropDownListFor(viewModel => viewModel.Client.ClientCategoryId,
                        new List<SelectListItem> {
                            new SelectListItem { Value = "1", Text = "Individual with Disability" },
                            new SelectListItem { Value = "2", Text = "Family Member" },
                            new SelectListItem { Value = "3", Text = "Professional / Representative of Community Living" },
                            new SelectListItem { Value = "4", Text = "Professional / Representative of Education" },
                            new SelectListItem { Value = "5", Text = "Professional / Representative of Technology" },
                            new SelectListItem { Value = "6", Text = "Professional / Representative of Employment" },
                            new SelectListItem { Value = "7", Text = "Professional / Representative of Health, Allied Health, Rehabilitative Services" }
                        }, new { @class = "form-control" })
            </div>
        </div>

        <div class="col-md-4">
            <label>Eligible for Loan?</label>

            @*Click on label broke for False but Cant mix regular label with html.Radiobutton for*@
            @*SO-2559208*@
            <div class="form-group"> 

                    @*<label class="radio-inline"> True *@
                    @Html.LabelFor(model => model.Client.LoanEligibility, "True", new { @class = "radio-inline" })
                    @Html.RadioButtonFor(model => model.Client.LoanEligibility, "True", new { @class = "form-check-input" })
                    @*</label>*@

                    @*<label class="radio-inline"> False*@
                    @Html.LabelFor(model => model.Client.LoanEligibility, "False", new { @class = "radio-inline" })
                    @Html.RadioButtonFor(model => model.Client.LoanEligibility, "False", new { @class = "form-check-input" })
                    @*</label>*@       
          </div>

            @*<fieldset>
                <legend>Eligible for Loan?</legend>
            </fieldset>*@
            
        </div>

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.Company)
                @Html.TextBoxFor(viewModel => viewModel.Client.Company, new { @class = "form-control", maxlength = "50" })
            </div>
        </div>
    </div>


    //If referencing the Model from inside the HTMLHelper it's first argument type is always the Model of the page so it doesn't matter what you call it
    //If referencing the Model outside HTMLHelper you must use Model


    //Cant do an HTML.DropDownListHelper, as we are using the ViewModel IEnumerable to loop through list


    // Disabilities -------------------------------------------------------------------------------------

    <div class="row">

        <div class="col-md-4">

            <label>Disabilities</label>
            <br />

            @foreach (var disabilityCategory in Model.DisabilityCategories)
            {
                <div class="form-check">

                    @Html.Label(disabilityCategory.DisabilityType)

                    <input type="checkbox" name="DisabilityIds" value="@disabilityCategory.DisabilityCategoryId"
                           @if (Model.Client.DisabilityIds.Contains(disabilityCategory.DisabilityCategoryId)) { <text> checked="checked" </text>              } />
                </div>
            }
        </div>

        @* Notes -------------------------------------------------------------------------------------------*@

        <div class="col-md-4">
            <div class="form-group">
                &#160;
                @Html.LabelFor(viewModel => viewModel.Client.Notes)
                @Html.TextAreaFor(viewModel => viewModel.Client.Notes, new { @class = "form-control" })
            </div>
        </div>

        @* Loan History -------------------------------------------------------------------------------------*@


        <div class="col-md-4">

            <label>&#160;Loan History</label>
            <br />
            <table class="table table-striped">
                <tr>
                    <th>Loan Id</th>
                    <th>Date Created</th>
                    <th>View</th>
                </tr>


                @foreach (var associatedLoan in Model.AssociatedLoans)
                {

                    <tr>
                        <td>@associatedLoan.LoanMasterId</td>
                        <td>@associatedLoan.DateCreated</td>
                        <td>
                            <a href="/Loan/ViewItems?loanNumber=@associatedLoan.LoanNumber"> View </a>
                        </td>
                    </tr>
                }
            </table>
        </div>




    </div>

    //The ActionMethod being posted to must have parameter name that matches this attribute name or object with matching property name


    // Note Even though the DisabilityIds are getting passed into this view through the Client Object
    // This posts them back to the seperate DisabilityIds parameter instead of back to the Client because we
    // are using a viewModel here (even if we removed the DisabilityIds parameter from the Post Method)




    <br />

    <div class="text-left">
        <input class="btn btn-primary" type="submit" value="Submit Changes" />  
    </div>
    <br />


    @*<div class="btn btn-default">
        @Html.ActionLink("Cancel", "Index")
    </div>*@

    <button class="btn btn-default" type="button" name="Cancel" data-toggle="modal" data-target="#cancelModal">Cancel</button>

    //JQuery Validation Plugin, link in Layout?
    @*<script>
        $("#commentForm").validate();
    </script>*@

}


@*Modal*@
<div class="modal fade" id="cancelModal" tabindex="-1" role="dialog" aria-labelledby="ModalTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="ModalTitle">Please Confirm</h3>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <h4>You want to discard all changes on this form?</h4>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">No, Go Back</button>

                <div class="btn btn-default">
                    @Html.ActionLink("Confirm", "Index")
                </div>

            </div>
        </div>
    </div>
</div>